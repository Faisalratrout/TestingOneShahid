{"ast":null,"code":"import axios from 'axios';\n// Day 2: Setting up proper axios API configuration\n// Using JSONPlaceholder for now, but structured to easily switch to real backend\nconst API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n// Create axios instance with interceptors\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 second timeout\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API - Day 2: Making it more realistic with axios\nexport const authAPI = {\n  login: async credentials => {\n    try {\n      // For demo purposes, we'll validate against mock data but use axios structure\n      // In real app, this would be: const response = await api.post('/auth/login', credentials);\n\n      // Simulate real API call delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      // Mock authentication check - replace with real API call\n      if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n        // Simulate fetching user data from JSONPlaceholder\n        const userResponse = await api.get('/users/1');\n        const userData = userResponse.data;\n        const mockUser = {\n          id: userData.id.toString(),\n          email: credentials.email,\n          name: userData.name,\n          role: 'user'\n        };\n        const token = 'jwt-token-' + Date.now() + '-' + userData.id;\n        return {\n          success: true,\n          data: {\n            user: mockUser,\n            token\n          }\n        };\n      } else {\n        throw new Error('Invalid email or password');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error(error.message || 'Login failed');\n    }\n  },\n  logout: async () => {\n    try {\n      // In real app: await api.post('/auth/logout');\n      await new Promise(resolve => setTimeout(resolve, 300));\n      localStorage.removeItem('authToken');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Continue with logout even if API call fails\n      localStorage.removeItem('authToken');\n    }\n  },\n  verifyToken: async token => {\n    try {\n      // In real app: const response = await api.get('/auth/verify');\n      await new Promise(resolve => setTimeout(resolve, 500));\n      if (token.startsWith('jwt-token')) {\n        // Simulate fetching user data\n        const userResponse = await api.get('/users/1');\n        const userData = userResponse.data;\n        return {\n          success: true,\n          data: {\n            id: userData.id.toString(),\n            email: 'demo@example.com',\n            name: userData.name,\n            role: 'user'\n          }\n        };\n      } else {\n        throw new Error('Invalid token');\n      }\n    } catch (error) {\n      console.error('Token verification error:', error);\n      throw new Error('Token verification failed');\n    }\n  }\n};\n\n// Products API - Day 2: Using real axios calls with JSONPlaceholder\nexport const productsAPI = {\n  getProducts: async params => {\n    try {\n      // Fetch posts from JSONPlaceholder and transform to products\n      const response = await api.get('/posts');\n      const posts = response.data;\n\n      // Transform posts into products\n      const mockProducts = posts.slice(0, 20).map((post, index) => ({\n        id: post.id.toString(),\n        name: post.title.split(' ').slice(0, 3).join(' '),\n        // Use first 3 words as product name\n        description: post.body,\n        price: Math.round((Math.random() * 500 + 50) * 100) / 100,\n        // Random price between $50-$550\n        category: ['electronics', 'sports', 'home', 'accessories', 'books'][index % 5],\n        imageUrl: `https://picsum.photos/400/300?random=${post.id}`,\n        // Random images\n        inStock: Math.random() > 0.2,\n        // 80% chance of being in stock\n        rating: Math.round((Math.random() * 2 + 3) * 10) / 10,\n        // Rating between 3.0-5.0\n        reviews: Math.floor(Math.random() * 200) + 10 // 10-210 reviews\n      }));\n      let filteredProducts = [...mockProducts];\n\n      // Apply filters\n      if (params !== null && params !== void 0 && params.category && params.category !== 'all') {\n        filteredProducts = filteredProducts.filter(p => p.category === params.category);\n      }\n      if (params !== null && params !== void 0 && params.minPrice) {\n        filteredProducts = filteredProducts.filter(p => p.price >= params.minPrice);\n      }\n      if (params !== null && params !== void 0 && params.maxPrice) {\n        filteredProducts = filteredProducts.filter(p => p.price <= params.maxPrice);\n      }\n      if ((params === null || params === void 0 ? void 0 : params.inStock) !== undefined) {\n        filteredProducts = filteredProducts.filter(p => p.inStock === params.inStock);\n      }\n      if (params !== null && params !== void 0 && params.minRating) {\n        filteredProducts = filteredProducts.filter(p => p.rating >= params.minRating);\n      }\n      if (params !== null && params !== void 0 && params.search) {\n        const searchLower = params.search.toLowerCase();\n        filteredProducts = filteredProducts.filter(p => p.name.toLowerCase().includes(searchLower) || p.description.toLowerCase().includes(searchLower));\n      }\n\n      // Apply sorting\n      if (params !== null && params !== void 0 && params.sortBy) {\n        filteredProducts.sort((a, b) => {\n          let aVal, bVal;\n          switch (params.sortBy) {\n            case 'name':\n              aVal = a.name;\n              bVal = b.name;\n              break;\n            case 'price':\n              aVal = a.price;\n              bVal = b.price;\n              break;\n            case 'rating':\n              aVal = a.rating;\n              bVal = b.rating;\n              break;\n            default:\n              return 0;\n          }\n          if (params.sortOrder === 'desc') {\n            return bVal > aVal ? 1 : -1;\n          }\n          return aVal > bVal ? 1 : -1;\n        });\n      }\n\n      // Apply pagination\n      const limit = (params === null || params === void 0 ? void 0 : params.limit) || 6;\n      const page = (params === null || params === void 0 ? void 0 : params.page) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedProducts = filteredProducts.slice(startIndex, startIndex + limit);\n      const totalPages = Math.ceil(filteredProducts.length / limit);\n      return {\n        success: true,\n        data: {\n          products: paginatedProducts,\n          totalPages\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw new Error('Failed to fetch products');\n    }\n  },\n  getProductById: async id => {\n    try {\n      // Fetch specific post from JSONPlaceholder\n      const response = await api.get(`/posts/${id}`);\n      const post = response.data;\n      const product = {\n        id: post.id.toString(),\n        name: post.title.split(' ').slice(0, 3).join(' '),\n        description: post.body,\n        price: Math.round((Math.random() * 500 + 50) * 100) / 100,\n        category: ['electronics', 'sports', 'home', 'accessories', 'books'][post.id % 5],\n        imageUrl: `https://picsum.photos/400/300?random=${post.id}`,\n        inStock: true,\n        rating: Math.round((Math.random() * 2 + 3) * 10) / 10,\n        reviews: Math.floor(Math.random() * 200) + 10\n      };\n      return {\n        success: true,\n        data: product\n      };\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      throw new Error('Product not found');\n    }\n  }\n};\n\n// Orders API - Day 2: Using axios for order management\nexport const ordersAPI = {\n  createOrder: async (items, totalAmount) => {\n    try {\n      // In real app: const response = await api.post('/orders', { items, totalAmount });\n      // For now, simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const mockOrder = {\n        id: 'order-' + Date.now(),\n        userId: '1',\n        items,\n        totalAmount,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        shippingAddress: {\n          street: '123 Main St',\n          city: 'San Francisco',\n          state: 'CA',\n          zipCode: '94102',\n          country: 'USA'\n        }\n      };\n      return {\n        success: true,\n        data: mockOrder\n      };\n    } catch (error) {\n      console.error('Error creating order:', error);\n      throw new Error('Failed to create order');\n    }\n  },\n  getUserOrders: async userId => {\n    try {\n      // In real app: const response = await api.get(`/users/${userId}/orders`);\n      // For now, fetch some data from JSONPlaceholder and transform\n      const response = await api.get('/users/1/posts');\n      const posts = response.data;\n\n      // Transform posts into mock orders\n      const mockOrders = posts.slice(0, 3).map((post, index) => ({\n        id: `order-${post.id}`,\n        userId: userId,\n        items: [],\n        // Will populate with cart items when we have cart functionality\n        totalAmount: Math.round((Math.random() * 300 + 50) * 100) / 100,\n        status: ['delivered', 'shipped', 'processing', 'pending'][index % 4],\n        createdAt: new Date(Date.now() - index * 3 * 24 * 60 * 60 * 1000).toISOString(),\n        shippingAddress: {\n          street: '123 Main St',\n          city: 'San Francisco',\n          state: 'CA',\n          zipCode: '94102',\n          country: 'USA'\n        }\n      }));\n      return {\n        success: true,\n        data: mockOrders\n      };\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      throw new Error('Failed to fetch orders');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","login","credentials","resolve","setTimeout","email","password","userResponse","get","userData","data","mockUser","id","toString","name","role","Date","now","success","user","Error","console","message","logout","verifyToken","startsWith","productsAPI","getProducts","params","posts","mockProducts","slice","map","post","index","title","split","join","description","body","price","Math","round","random","category","imageUrl","inStock","rating","reviews","floor","filteredProducts","filter","p","minPrice","maxPrice","undefined","minRating","search","searchLower","toLowerCase","includes","sortBy","sort","a","b","aVal","bVal","sortOrder","limit","page","startIndex","paginatedProducts","totalPages","ceil","length","products","getProductById","product","ordersAPI","createOrder","items","totalAmount","mockOrder","userId","createdAt","toISOString","shippingAddress","street","city","state","zipCode","country","getUserOrders","mockOrders"],"sources":["/Users/faratrout/Desktop/e-commdash/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { LoginCredentials, User, Product, Order, ApiResponse, PaginationParams } from '../types';\n\n// Day 2: Setting up proper axios API configuration\n// Using JSONPlaceholder for now, but structured to easily switch to real backend\nconst API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n// Create axios instance with interceptors\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API - Day 2: Making it more realistic with axios\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<ApiResponse<{ user: User; token: string }>> => {\n    try {\n      // For demo purposes, we'll validate against mock data but use axios structure\n      // In real app, this would be: const response = await api.post('/auth/login', credentials);\n      \n      // Simulate real API call delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Mock authentication check - replace with real API call\n      if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n        // Simulate fetching user data from JSONPlaceholder\n        const userResponse = await api.get('/users/1');\n        const userData = userResponse.data;\n        \n        const mockUser: User = {\n          id: userData.id.toString(),\n          email: credentials.email,\n          name: userData.name,\n          role: 'user'\n        };\n        \n        const token = 'jwt-token-' + Date.now() + '-' + userData.id;\n        \n        return {\n          success: true,\n          data: { user: mockUser, token }\n        };\n      } else {\n        throw new Error('Invalid email or password');\n      }\n    } catch (error: any) {\n      console.error('Login error:', error);\n      throw new Error(error.message || 'Login failed');\n    }\n  },\n\n  logout: async (): Promise<void> => {\n    try {\n      // In real app: await api.post('/auth/logout');\n      await new Promise(resolve => setTimeout(resolve, 300));\n      localStorage.removeItem('authToken');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Continue with logout even if API call fails\n      localStorage.removeItem('authToken');\n    }\n  },\n\n  verifyToken: async (token: string): Promise<ApiResponse<User>> => {\n    try {\n      // In real app: const response = await api.get('/auth/verify');\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (token.startsWith('jwt-token')) {\n        // Simulate fetching user data\n        const userResponse = await api.get('/users/1');\n        const userData = userResponse.data;\n        \n        return {\n          success: true,\n          data: {\n            id: userData.id.toString(),\n            email: 'demo@example.com',\n            name: userData.name,\n            role: 'user'\n          }\n        };\n      } else {\n        throw new Error('Invalid token');\n      }\n    } catch (error: any) {\n      console.error('Token verification error:', error);\n      throw new Error('Token verification failed');\n    }\n  }\n};\n\n// Products API - Day 2: Using real axios calls with JSONPlaceholder\nexport const productsAPI = {\n  getProducts: async (params?: PaginationParams): Promise<ApiResponse<{ products: Product[]; totalPages: number }>> => {\n    try {\n      // Fetch posts from JSONPlaceholder and transform to products\n      const response = await api.get('/posts');\n      const posts = response.data;\n      \n      // Transform posts into products\n      const mockProducts: Product[] = posts.slice(0, 20).map((post: any, index: number) => ({\n        id: post.id.toString(),\n        name: post.title.split(' ').slice(0, 3).join(' '), // Use first 3 words as product name\n        description: post.body,\n        price: Math.round((Math.random() * 500 + 50) * 100) / 100, // Random price between $50-$550\n        category: ['electronics', 'sports', 'home', 'accessories', 'books'][index % 5],\n        imageUrl: `https://picsum.photos/400/300?random=${post.id}`, // Random images\n        inStock: Math.random() > 0.2, // 80% chance of being in stock\n        rating: Math.round((Math.random() * 2 + 3) * 10) / 10, // Rating between 3.0-5.0\n        reviews: Math.floor(Math.random() * 200) + 10 // 10-210 reviews\n      }));\n\n      let filteredProducts = [...mockProducts];\n\n      // Apply filters\n      if (params?.category && params.category !== 'all') {\n        filteredProducts = filteredProducts.filter(p => p.category === params.category);\n      }\n      if (params?.minPrice) {\n        filteredProducts = filteredProducts.filter(p => p.price >= params.minPrice!);\n      }\n      if (params?.maxPrice) {\n        filteredProducts = filteredProducts.filter(p => p.price <= params.maxPrice!);\n      }\n      if (params?.inStock !== undefined) {\n        filteredProducts = filteredProducts.filter(p => p.inStock === params.inStock);\n      }\n      if (params?.minRating) {\n        filteredProducts = filteredProducts.filter(p => p.rating >= params.minRating!);\n      }\n      if (params?.search) {\n        const searchLower = params.search.toLowerCase();\n        filteredProducts = filteredProducts.filter(p => \n          p.name.toLowerCase().includes(searchLower) ||\n          p.description.toLowerCase().includes(searchLower)\n        );\n      }\n\n      // Apply sorting\n      if (params?.sortBy) {\n        filteredProducts.sort((a, b) => {\n          let aVal: any, bVal: any;\n          \n          switch (params.sortBy) {\n            case 'name':\n              aVal = a.name;\n              bVal = b.name;\n              break;\n            case 'price':\n              aVal = a.price;\n              bVal = b.price;\n              break;\n            case 'rating':\n              aVal = a.rating;\n              bVal = b.rating;\n              break;\n            default:\n              return 0;\n          }\n\n          if (params.sortOrder === 'desc') {\n            return bVal > aVal ? 1 : -1;\n          }\n          return aVal > bVal ? 1 : -1;\n        });\n      }\n\n      // Apply pagination\n      const limit = params?.limit || 6;\n      const page = params?.page || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedProducts = filteredProducts.slice(startIndex, startIndex + limit);\n      const totalPages = Math.ceil(filteredProducts.length / limit);\n\n      return {\n        success: true,\n        data: {\n          products: paginatedProducts,\n          totalPages\n        }\n      };\n    } catch (error: any) {\n      console.error('Error fetching products:', error);\n      throw new Error('Failed to fetch products');\n    }\n  },\n\n  getProductById: async (id: string): Promise<ApiResponse<Product>> => {\n    try {\n      // Fetch specific post from JSONPlaceholder\n      const response = await api.get(`/posts/${id}`);\n      const post = response.data;\n      \n      const product: Product = {\n        id: post.id.toString(),\n        name: post.title.split(' ').slice(0, 3).join(' '),\n        description: post.body,\n        price: Math.round((Math.random() * 500 + 50) * 100) / 100,\n        category: ['electronics', 'sports', 'home', 'accessories', 'books'][post.id % 5],\n        imageUrl: `https://picsum.photos/400/300?random=${post.id}`,\n        inStock: true,\n        rating: Math.round((Math.random() * 2 + 3) * 10) / 10,\n        reviews: Math.floor(Math.random() * 200) + 10\n      };\n\n      return {\n        success: true,\n        data: product\n      };\n    } catch (error: any) {\n      console.error('Error fetching product:', error);\n      throw new Error('Product not found');\n    }\n  }\n};\n\n// Orders API - Day 2: Using axios for order management\nexport const ordersAPI = {\n  createOrder: async (items: any[], totalAmount: number): Promise<ApiResponse<Order>> => {\n    try {\n      // In real app: const response = await api.post('/orders', { items, totalAmount });\n      // For now, simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      const mockOrder: Order = {\n        id: 'order-' + Date.now(),\n        userId: '1',\n        items,\n        totalAmount,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        shippingAddress: {\n          street: '123 Main St',\n          city: 'San Francisco',\n          state: 'CA',\n          zipCode: '94102',\n          country: 'USA'\n        }\n      };\n\n      return {\n        success: true,\n        data: mockOrder\n      };\n    } catch (error: any) {\n      console.error('Error creating order:', error);\n      throw new Error('Failed to create order');\n    }\n  },\n\n  getUserOrders: async (userId: string): Promise<ApiResponse<Order[]>> => {\n    try {\n      // In real app: const response = await api.get(`/users/${userId}/orders`);\n      // For now, fetch some data from JSONPlaceholder and transform\n      const response = await api.get('/users/1/posts');\n      const posts = response.data;\n\n      // Transform posts into mock orders\n      const mockOrders: Order[] = posts.slice(0, 3).map((post: any, index: number) => ({\n        id: `order-${post.id}`,\n        userId: userId,\n        items: [], // Will populate with cart items when we have cart functionality\n        totalAmount: Math.round((Math.random() * 300 + 50) * 100) / 100,\n        status: ['delivered', 'shipped', 'processing', 'pending'][index % 4] as any,\n        createdAt: new Date(Date.now() - (index * 3 * 24 * 60 * 60 * 1000)).toISOString(),\n        shippingAddress: {\n          street: '123 Main St',\n          city: 'San Francisco',\n          state: 'CA',\n          zipCode: '94102',\n          country: 'USA'\n        }\n      }));\n\n      return {\n        success: true,\n        data: mockOrders\n      };\n    } catch (error: any) {\n      console.error('Error fetching orders:', error);\n      throw new Error('Failed to fetch orders');\n    }\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}