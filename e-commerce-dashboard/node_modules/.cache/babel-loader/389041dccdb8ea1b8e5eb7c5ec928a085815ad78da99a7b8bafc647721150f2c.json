{"ast":null,"code":"// Day 1 Basic auth slice  just login/logout for now\n// Will add more features later as I figure them out\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// Async thunk for login\nexport const loginUser = createAsyncThunk('auth/login', async credentials => {\n  // Simple mock for Day 1 will make it real later\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n    const mockUser = {\n      id: '1',\n      name: 'Demo User',\n      email: credentials.email,\n      role: 'user'\n    };\n    const token = 'mock-jwt-token-' + Date.now();\n    localStorage.setItem('authToken', token);\n    return {\n      user: mockUser,\n      token\n    };\n  }\n  throw new Error('Invalid credentials');\n});\n\n// Async thunk for verifying existing token\nexport const verifyToken = createAsyncThunk('auth/verifyToken', async token => {\n  // Simple mock verification for Day 1\n  await new Promise(resolve => setTimeout(resolve, 500));\n  if (token.startsWith('mock-jwt-token-')) {\n    return {\n      id: '1',\n      name: 'Demo User',\n      email: 'demo@example.com',\n      role: 'user'\n    };\n  }\n  throw new Error('Invalid token');\n});\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('authToken'),\n  // Check if user was already logged in\n  isLoading: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.error = null;\n      localStorage.removeItem('authToken'); // Clean up localStorage too\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Login cases\n    .addCase(loginUser.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Login failed';\n    })\n    // Token verification cases\n    .addCase(verifyToken.pending, state => {\n      state.isLoading = true;\n    }).addCase(verifyToken.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    }).addCase(verifyToken.rejected, state => {\n      state.isLoading = false;\n      state.token = null;\n      localStorage.removeItem('authToken');\n    });\n  }\n});\nexport const {\n  logout,\n  clearError\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginUser","credentials","Promise","resolve","setTimeout","email","password","mockUser","id","name","role","token","Date","now","localStorage","setItem","user","Error","verifyToken","startsWith","initialState","getItem","isLoading","error","authSlice","reducers","logout","state","removeItem","clearError","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["/Users/faratrout/Desktop/e-commdash/src/store/slices/authSlice.ts"],"sourcesContent":["// Day 1 Basic auth slice  just login/logout for now\n// Will add more features later as I figure them out\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { AuthState, LoginCredentials } from '../../types';\n\n// Async thunk for login\nexport const loginUser = createAsyncThunk(\n  'auth/login',\n  async (credentials: LoginCredentials) => {\n    // Simple mock for Day 1 will make it real later\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n      const mockUser = {\n        id: '1',\n        name: 'Demo User',\n        email: credentials.email,\n        role: 'user' as const\n      };\n      const token = 'mock-jwt-token-' + Date.now();\n      localStorage.setItem('authToken', token);\n      return { user: mockUser, token };\n    }\n    throw new Error('Invalid credentials');\n  }\n);\n\n// Async thunk for verifying existing token\nexport const verifyToken = createAsyncThunk(\n  'auth/verifyToken',\n  async (token: string) => {\n    // Simple mock verification for Day 1\n    await new Promise(resolve => setTimeout(resolve, 500));\n    if (token.startsWith('mock-jwt-token-')) {\n      return {\n        id: '1',\n        name: 'Demo User',\n        email: 'demo@example.com',\n        role: 'user' as const\n      };\n    }\n    throw new Error('Invalid token');\n  }\n);\n\nconst initialState: AuthState = {\n  user: null,\n  token: localStorage.getItem('authToken'), // Check if user was already logged in\n  isLoading: false,\n  error: null,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      state.user = null;\n      state.token = null;\n      state.error = null;\n      localStorage.removeItem('authToken'); // Clean up localStorage too\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Login cases\n      .addCase(loginUser.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(loginUser.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n      })\n      .addCase(loginUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Login failed';\n      })\n      // Token verification cases\n      .addCase(verifyToken.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(verifyToken.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.user = action.payload;\n      })\n      .addCase(verifyToken.rejected, (state) => {\n        state.isLoading = false;\n        state.token = null;\n        localStorage.removeItem('authToken');\n      });\n  },\n});\n\nexport const { logout, clearError } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}